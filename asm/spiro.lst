     1                                  ; NASM Spirograph
     2                                  ; John Morrice 2011.  Released into the public domain
     3                                  
     4                                  ; A couple of warnings:
     5                                  ; 1. Some of this code is written in the unstructured paradigm.
     6                                  ; 2. This AMD64 OpenGL application is my first assembly program.
     7                                  
     8                                  BITS 64 
     9                                  
    10                                  %define GL_COLOR_BUFFER_BIT 0x00004000
    11                                  %define GL_POINTS 0x0000
    12                                  %define GL_VERTEX_ARRAY 0x8074
    13                                  %define GL_DOUBLE 0x140A
    14                                  %define SPIRO_LENGTH 10000
    15                                  
    16                                  section .data
    17 00000000 4E41534D2053706972-         name:   db 'NASM Spirograph', 0
    18 00000009 6F677261706800     
    19 00000010 55736167653A202573-         usage:  db 'Usage: %s MOVING FIXED OFFSET', 10, 0
    20 00000019 204D4F56494E472046-
    21 00000022 49584544204F464653-
    22 0000002B 45540A00           
    23 0000002F B81E85EB51B89E3F            increment: dq __float64__(0.03)
    24 00000037 25660A00                    dbg_str: db '%f', 10, 0
    25                                  
    26                                  section .text
    27                                  
    28                                      global main 
    29                                  
    30                                      extern stderr, printf, fprintf
    31                                      extern atof
    32                                      extern exit
    33                                  
    34                                      extern sin, cos
    35                                  
    36                                      extern glClear
    37                                      extern glEnableClientState, glDisableClientState
    38                                      extern glVertexPointer, glDrawArrays
    39                                  
    40                                      extern glutInit, glutInitDisplayMode, glutCreateWindow
    41                                      extern glutDisplayFunc, glutSwapBuffers, glutMainLoop
    42                                  
    43                                  
    44                                  ; Process arguments
    45                                  ; Expects:
    46                                  ;   argc in rdi
    47                                  ;   argv in rsi    
    48                                  ;   memory for 3 floats in rdx
    49                                  ; argc must equal 4, otherwise terminate
    50                                  ; Read argv into floats with atof
    51                                  read_arguments:
    52 00000000 4883FF04                    cmp rdi, 4
    53 00000004 7544                        jnz usage_error
    54 00000006 48B903000000000000-         mov rcx, 3
    55 0000000F 00                 
    56 00000010 4889F3                      mov rbx, rsi
    57 00000013 4883C308                    add rbx, 8
    58 00000017 4989D0                      mov r8, rdx
    59                                  
    60                                  ; If arguments okay do: 
    61                                  read_args:
    62 0000001A 488B3B                      mov rdi, [rbx]
    63 0000001D 48B800000000000000-         mov rax, 0
    64 00000026 00                 
    65                                  
    66                                      ; Call atof, preserving registers
    67 00000027 52                          push rdx
    68 00000028 4150                        push r8
    69 0000002A 51                          push rcx
    70 0000002B E8(00000000)                call atof
    71 00000030 59                          pop rcx
    72 00000031 4158                        pop r8
    73 00000033 5A                          pop rdx
    74                                  
    75 00000034 66480F7EC0                  movq rax, xmm0 
    76 00000039 498900                      mov [r8], rax
    77 0000003C 4883C308                    add rbx, 8
    78 00000040 4983C008                    add r8, 8
    79 00000044 48FFC9                      dec rcx
    80 00000047 75D1                        jnz read_args 
    81 00000049 C3                          ret
    82                                  
    83                                  ; Otherwise for incorrect arguments do:
    84                                  usage_error:
    85 0000004A 488B16                      mov rdx, [rsi]
    86 0000004D 48BE-                       mov rsi, usage
    87 0000004F [1000000000000000] 
    88 00000057 488B3C25[00000000]          mov rdi, [stderr]
    89 0000005F 48B800000000000000-         mov rax, 0
    90 00000068 00                 
    91 00000069 E8(00000000)                call fprintf
    92 0000006E 48BF01000000000000-         mov rdi, 1
    93 00000077 00                 
    94 00000078 E8(00000000)                call exit 
    95                                  
    96                                  ; Display the vertex array
    97                                  display:
    98                                      
    99 0000007D 48BF00400000000000-         mov rdi, GL_COLOR_BUFFER_BIT
   100 00000086 00                 
   101 00000087 E8(00000000)                call glClear
   102                                  
   103 0000008C 48BA10270000000000-         mov rdx, SPIRO_LENGTH
   104 00000095 00                 
   105 00000096 48BE00000000000000-         mov rsi, 0
   106 0000009F 00                 
   107 000000A0 48BF00000000000000-         mov rdi, GL_POINTS
   108 000000A9 00                 
   109 000000AA E8(00000000)                call glDrawArrays
   110                                  
   111 000000AF E8(00000000)                call glutSwapBuffers
   112 000000B4 C3                          ret
   113                                  
   114                                  ; Initialize OpenGL
   115                                  initialize:
   116                                      ; Save rdi
   117                                      ; Write that location to rdi for calling glutInit
   118 000000B5 57                          push rdi
   119 000000B6 4889E7                      mov rdi, rsp
   120 000000B9 E8(00000000)                call glutInit
   121 000000BE 5F                          pop rdi
   122                                  
   123 000000BF 48BF00000000000000-         mov rdi, 0
   124 000000C8 00                 
   125 000000C9 E8(00000000)                call glutInitDisplayMode
   126                                  
   127 000000CE 48BF-                       mov rdi, name 
   128 000000D0 [0000000000000000] 
   129 000000D8 E8(00000000)                call glutCreateWindow
   130                                  
   131 000000DD 48BF-                       mov rdi, display
   132 000000DF [7D00000000000000] 
   133 000000E7 E8(00000000)                call glutDisplayFunc
   134 000000EC C3                          ret
   135                                  
   136                                  ; spiro_x is a little helper for draw_spiro
   137                                  ; Returns into xmm6
   138                                  spiro_x:
   139 000000ED F30F7EFA                    movq xmm7, xmm2
   140 000000F1 F30F7EC4                    movq xmm0, xmm4
   141 000000F5 E8(00000000)                call cos
   142 000000FA F20F59F8                    mulsd xmm7, xmm0
   143 000000FE F30F7EC6                    movq xmm0, xmm6
   144 00000102 E8(00000000)                call cos
   145 00000107 F20F59C3                    mulsd xmm0, xmm3
   146 0000010B F20F58F8                    addsd xmm7, xmm0
   147 0000010F C3                          ret
   148                                  
   149                                  ; spiro_y is a little helper for draw_spiro
   150                                  ; Returns into xmm6
   151                                  spiro_y:
   152 00000110 F30F7EFA                    movq xmm7, xmm2
   153 00000114 F30F7EC4                    movq xmm0, xmm4
   154 00000118 E8(00000000)                call sin
   155 0000011D F20F59F8                    mulsd xmm7, xmm0
   156 00000121 F30F7EC6                    movq xmm0, xmm6
   157 00000125 E8(00000000)                call sin 
   158 0000012A F20F59C3                    mulsd xmm0, xmm3
   159 0000012E F20F5CF8                    subsd xmm7, xmm0
   160 00000132 C3                          ret
   161                                  
   162                                  ; Draw the spiro into the vertex array
   163                                  ; xmm1: moving
   164                                  ; xmm2: fixed
   165                                  ; xmm3: offset
   166                                  ; rdi: vertices 
   167                                  draw_spiro:
   168                                      
   169 00000133 48B800000000000000-         mov rax, 0
   170 0000013C 00                 
   171                                      ; xmm4 is time t
   172 0000013D 66480F6EE0                  movq xmm4, rax
   173                                      ; xmm5 is the time increment
   174 00000142 48B800000000000000-         mov rax, 0
   175 0000014B 00                 
   176 0000014C 48B8-                       mov rax, increment
   177 0000014E [2F00000000000000] 
   178 00000156 66480F6EE8                  movq xmm5, rax
   179                                      
   180                                      ; xmm2 becomes the path magnitude r, fixed - moving
   181 0000015B F20F5CD1                    subsd xmm2, xmm1
   182                                  
   183 0000015F 48B910270000000000-         mov rcx, SPIRO_LENGTH
   184 00000168 00                 
   185                                  
   186 00000169 4889F8                      mov rax, rdi    
   187                                  
   188                                  ; Drawing loop
   189                                  parametric:
   190                                  
   191 0000016C 51                          push rcx
   192                                  
   193                                      ; xmm6 becomes t * r / moving
   194 0000016D F30F7EF4                    movq xmm6, xmm4
   195 00000171 F20F59F2                    mulsd xmm6, xmm2
   196 00000175 F20F5EF1                    divsd xmm6, xmm1
   197                                  
   198                                      ; Write x into the vertex array
   199 00000179 57                          push rdi
   200 0000017A E86EFFFFFF                  call spiro_x
   201 0000017F 5F                          pop rdi
   202 00000180 660FD63F                    movq [rdi], xmm7
   203                                  
   204 00000184 4883C708                    add rdi, 8
   205                                  
   206                                      ; Write y into the vertex array
   207 00000188 57                          push rdi
   208 00000189 E882FFFFFF                  call spiro_y
   209 0000018E 5F                          pop rdi
   210 0000018F 660FD63F                    movq [rdi], xmm7
   211                                   
   212 00000193 57                          push rdi
   213 00000194 55                          push rbp
   214 00000195 4889E5                      mov rbp, rsp
   215 00000198 F30F7EC5                    movq xmm0, xmm5
   216 0000019C 48BF-                       mov rdi, dbg_str
   217 0000019E [3700000000000000] 
   218 000001A6 48B801000000000000-         mov rax, 1
   219 000001AF 00                 
   220 000001B0 E8(00000000)                call printf
   221 000001B5 5D                          pop rbp
   222 000001B6 5F                          pop rdi
   223                                      
   224 000001B7 59                          pop rcx
   225                                  
   226                                      ; Increment time
   227 000001B8 F20F58E5                    addsd xmm4, xmm5 
   228                                  
   229                                      ; Decrement counter
   230 000001BC 48FFC9                      dec rcx
   231 000001BF 75AB                        jnz parametric
   232                                  
   233 000001C1 C3                          ret
   234                                      
   235                                  ; Begin game loop
   236                                  render:
   237                                      ; The vertex array
   238 000001C2 4881EC00710200              sub rsp, 16 * SPIRO_LENGTH
   239                                  
   240                                      ; Draw the spirograph
   241 000001C9 4889E7                      mov rdi, rsp
   242 000001CC E862FFFFFF                  call draw_spiro
   243                                  
   244 000001D1 48BF74800000000000-         mov rdi, GL_VERTEX_ARRAY
   245 000001DA 00                 
   246 000001DB E8(00000000)                call glEnableClientState
   247                                  
   248 000001E0 48BF02000000000000-         mov rdi, 2
   249 000001E9 00                 
   250 000001EA 48BE0A140000000000-         mov rsi, GL_DOUBLE
   251 000001F3 00                 
   252 000001F4 48BA00000000000000-         mov rdx, 0
   253 000001FD 00                 
   254 000001FE 4889E1                      mov rcx, rsp
   255 00000201 E8(00000000)                call glVertexPointer
   256                                  
   257 00000206 E8(00000000)                call glutMainLoop
   258                                  
   259 0000020B 48BF74800000000000-         mov rdi, GL_VERTEX_ARRAY
   260 00000214 00                 
   261 00000215 E8(00000000)                call glDisableClientState
   262                                  
   263 0000021A C3                          ret
   264                                  
   265                                  ; Entry!
   266                                  main:
   267 0000021B 55                          push rbp
   268 0000021C 4889E5                      mov rbp, rsp
   269                                      
   270                                      ; Store the radii and offset in an array
   271                                      ; The array is pointed to by rdx
   272 0000021F 4883EC18                    sub rsp, 24
   273 00000223 4889E2                      mov rdx, rsp
   274                                  
   275                                      ; Get the radii etc from the command line arguments 
   276 00000226 52                          push rdx
   277 00000227 56                          push rsi
   278 00000228 57                          push rdi
   279 00000229 E8D2FDFFFF                  call read_arguments
   280 0000022E 5F                          pop rdi
   281 0000022F 5E                          pop rsi
   282 00000230 5A                          pop rdx
   283                                  
   284                                      ; Initialize OpenGL
   285 00000231 52                          push rdx
   286 00000232 E87EFEFFFF                  call initialize
   287 00000237 5A                          pop rdx
   288                                  
   289                                      ; Extract the values of the radii etc 
   290 00000238 F30F7E0A                    movq xmm1, [rdx]
   291 0000023C F30F7E5208                  movq xmm2, [rdx + 8]
   292 00000241 F30F7E5A10                  movq xmm3, [rdx + 16]
   293                                  
   294                                      ; Draw the spirograph
   295 00000246 E877FFFFFF                  call render
   296                                   
   297                                      ; Return
   298 0000024B 48B800000000000000-         mov rax, 0
   299 00000254 00                 
   300 00000255 4889EC                      mov rsp, rbp
   301 00000258 5D                          pop rbp
   302 00000259 C3                          ret
