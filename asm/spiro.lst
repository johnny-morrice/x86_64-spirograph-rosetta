     1                                  ; Spirograph in x86_64 assembly (NASM) with OpenGL
     2                                  ; John Morrice 2011.  Released into the public domain
     3                                  
     4                                  ; A couple of warnings:
     5                                  ; 1. Some of this code is written in the unstructured paradigm.
     6                                  ; 2. This is my first assembly program.
     7                                  
     8                                  BITS 64 
     9                                  
    10                                  %include "draw_spiro.asm"
    11                              <1> section .text
    12                              <1> 
    13                              <1>     extern sin, cos
    14                              <1> 
    15                              <1> ; Draw the spiro into the vertex array
    16                              <1> ; xmm0: moving
    17                              <1> ; xmm1: fixed
    18                              <1> ; xmm2: offset
    19                              <1> ; rdi: vertex array 
    20                              <1> ; rsi: length of vertex array
    21                              <1> draw_spiro:
    22                              <1>     
    23 00000000 55                  <1>     push rbp
    24 00000001 4889E5              <1>     mov rbp, rsp
    25 00000004 4883EC38            <1>     sub rsp, 56
    26                              <1> 
    27                              <1>     ; rbp - 8 is time t
    28 00000008 48C745F800000000    <1>     mov qword [rbp - 8], 0
    29                              <1>     ; rbp - 16 is time increment
    30 00000010 48B8B81E85EB51B89E- <1>     mov rax, __float64__(0.03)
    31 00000019 3F                  <1>
    32 0000001A 488945F0            <1>     mov qword [rbp - 16], rax
    33                              <1> 
    34                              <1>     ; rbp - 24 becomes the path magnitude, fixed - moving
    35 0000001E F20F5CC8            <1>     subsd xmm1, xmm0
    36 00000022 660FD64DE8          <1>     movq [rbp - 24], xmm1
    37                              <1> 
    38                              <1>     ; rbp - 32 becomes the moving circle's radius
    39 00000027 660FD645E0          <1>     movq [rbp - 32], xmm0
    40                              <1> 
    41                              <1>     ; rbp - 40 becomes the offset
    42 0000002C 660FD655D8          <1>     movq [rbp - 40], xmm2
    43                              <1> 
    44 00000031 4889F1              <1>     mov rcx, rsi
    45                              <1> 
    46                              <1> ; Drawing loop
    47                              <1> parametric:
    48                              <1> 
    49 00000034 51                  <1>     push rcx
    50                              <1> 
    51                              <1>     ; rbp - 48 becomes t * magnitude / moving
    52 00000035 488B45F8            <1>     mov rax, [rbp - 8]
    53 00000039 66480F6EC0          <1>     movq xmm0, rax
    54 0000003E 488B45E8            <1>     mov rax, [rbp - 24]
    55 00000042 66480F6EC8          <1>     movq xmm1, rax
    56 00000047 F20F59C1            <1>     mulsd xmm0, xmm1
    57 0000004B 488B45E0            <1>     mov rax, [rbp - 32]
    58 0000004F 66480F6EC8          <1>     movq xmm1, rax
    59 00000054 F20F5EC1            <1>     divsd xmm0, xmm1
    60 00000058 660FD645D0          <1>     movq [rbp - 48], xmm0
    61                              <1> 
    62                              <1>     ; Write x into the vertex array
    63 0000005D 57                  <1>     push rdi
    64 0000005E E83E000000          <1>     call spiro_x
    65 00000063 5F                  <1>     pop rdi
    66 00000064 660FD607            <1>     movq [rdi], xmm0
    67                              <1> 
    68 00000068 4883C708            <1>     add rdi, 8
    69                              <1> 
    70                              <1>     ; Write y into the vertex array
    71 0000006C 57                  <1>     push rdi
    72 0000006D E87C000000          <1>     call spiro_y
    73 00000072 5F                  <1>     pop rdi
    74 00000073 660FD607            <1>     movq [rdi], xmm0
    75                              <1> 
    76 00000077 4883C708            <1>     add rdi, 8   
    77                              <1>  
    78 0000007B 59                  <1>     pop rcx
    79                              <1> 
    80                              <1>     ; Increment time
    81 0000007C 488B45F8            <1>     mov rax, [rbp - 8]
    82 00000080 66480F6EC0          <1>     movq xmm0, rax
    83 00000085 488B45F0            <1>     mov rax, [rbp - 16]
    84 00000089 66480F6EC8          <1>     movq xmm1, rax
    85 0000008E F20F58C1            <1>     addsd xmm0, xmm1 
    86 00000092 660FD645F8          <1>     movq [rbp - 8], xmm0
    87                              <1> 
    88                              <1>     ; Decrement counter
    89 00000097 48FFC9              <1>     dec rcx
    90 0000009A 7598                <1>     jnz parametric
    91                              <1> 
    92 0000009C 4889EC              <1>     mov rsp, rbp
    93 0000009F 5D                  <1>     pop rbp
    94 000000A0 C3                  <1>     ret
    95                              <1> 
    96                              <1> ; spiro_x is a little helper for draw_spiro
    97                              <1> ; y coordinate of spiro
    98                              <1> spiro_x:
    99                              <1> 
   100 000000A1 488B45D0            <1>     mov rax, [rbp - 48]
   101 000000A5 66480F6EC0          <1>     movq xmm0, rax 
   102 000000AA 55                  <1>     push rbp
   103 000000AB E8(00000000)        <1>     call cos
   104                              <1> 
   105 000000B0 5D                  <1>     pop rbp
   106 000000B1 488B45D8            <1>     mov rax, [rbp - 40]
   107 000000B5 66480F6EC8          <1>     movq xmm1, rax
   108 000000BA F20F59C1            <1>     mulsd xmm0, xmm1
   109                              <1> 
   110 000000BE 660FD645C8          <1>     movq [rbp - 56], xmm0
   111                              <1>     
   112 000000C3 488B45F8            <1>     mov rax, [rbp - 8]
   113 000000C7 66480F6EC0          <1>     movq xmm0, rax
   114 000000CC 55                  <1>     push rbp
   115 000000CD E8(00000000)        <1>     call cos
   116 000000D2 5D                  <1>     pop rbp
   117 000000D3 488B45E8            <1>     mov rax, [rbp - 24]
   118 000000D7 66480F6EC8          <1>     movq xmm1, rax
   119 000000DC F20F59C1            <1>     mulsd xmm0, xmm1
   120                              <1> 
   121 000000E0 488B45C8            <1>     mov rax, [rbp - 56]
   122 000000E4 66480F6EC8          <1>     movq xmm1, rax
   123                              <1> 
   124 000000E9 F20F58C1            <1>     addsd xmm0, xmm1 
   125                              <1> 
   126 000000ED C3                  <1>     ret
   127                              <1> 
   128                              <1> ; spiro_y is a little helper for draw_spiro
   129                              <1> ; y coordinate of spiro
   130                              <1> spiro_y:
   131 000000EE 488B45D0            <1>     mov rax, [rbp - 48]
   132 000000F2 66480F6EC0          <1>     movq xmm0, rax 
   133 000000F7 55                  <1>     push rbp
   134 000000F8 E8(00000000)        <1>     call sin
   135 000000FD 5D                  <1>     pop rbp
   136 000000FE 488B45D8            <1>     mov rax, [rbp - 40]
   137 00000102 66480F6EC8          <1>     movq xmm1, rax
   138 00000107 F20F59C1            <1>     mulsd xmm0, xmm1
   139                              <1> 
   140 0000010B 660FD645C8          <1>     movq [rbp - 56], xmm0
   141                              <1>     
   142 00000110 488B45F8            <1>     mov rax, [rbp - 8]
   143 00000114 66480F6EC0          <1>     movq xmm0, rax
   144 00000119 55                  <1>     push rbp
   145 0000011A E8(00000000)        <1>     call sin 
   146 0000011F 5D                  <1>     pop rbp
   147 00000120 488B45E8            <1>     mov rax, [rbp - 24]
   148 00000124 66480F6EC8          <1>     movq xmm1, rax
   149 00000129 F20F59C1            <1>     mulsd xmm0, xmm1 
   150                              <1> 
   151 0000012D 488B45C8            <1>     mov rax, [rbp - 56]
   152 00000131 66480F6EC8          <1>     movq xmm1, rax
   153 00000136 F20F5CC1            <1>     subsd xmm0, xmm1 
   154                              <1> 
   155 0000013A C3                  <1>     ret
   156                                  
   157                                  %define GL_COLOR_BUFFER_BIT 0x00004000
   158                                  %define GL_POINTS 0
   159                                  %define GL_VERTEX_ARRAY 0x8074
   160                                  %define GL_DOUBLE 0x140A
   161                                  %define SPIRO_LENGTH 10000
   162                                  
   163                                  section .data
   164 00000000 4E41534D2053706972-         name:   db 'NASM Spirograph', 0
   165 00000009 6F677261706800     
   166 00000010 55736167653A202573-         usage:  db 'Usage: %s MOVING FIXED OFFSET', 10, 0
   167 00000019 204D4F56494E472046-
   168 00000022 49584544204F464653-
   169 0000002B 45540A00           
   170 0000002F 25660A00                    dbg_str: db '%f', 10, 0
   171                                  
   172                                  section .text
   173                                  
   174                                      global main 
   175                                  
   176                                      extern stderr, printf, fprintf
   177                                      extern atof
   178                                      extern exit
   179                                  
   180                                      extern glClear
   181                                      extern glEnableClientState, glDisableClientState
   182                                      extern glVertexPointer, glDrawArrays
   183                                  
   184                                      extern glutInit, glutInitDisplayMode, glutCreateWindow
   185                                      extern glutDisplayFunc, glutSwapBuffers, glutMainLoop
   186                                  
   187                                  
   188                                  ; Process arguments
   189                                  ; Expects:
   190                                  ;   argc in rdi
   191                                  ;   argv in rsi    
   192                                  ;   memory for 3 floats in rdx
   193                                  ; argc must equal 4, otherwise terminate
   194                                  ; Read argv into floats with atof
   195                                  read_arguments:
   196 0000013B 4883FF04                    cmp rdi, 4
   197 0000013F 7544                        jnz usage_error
   198 00000141 48B903000000000000-         mov rcx, 3
   199 0000014A 00                 
   200 0000014B 4889F3                      mov rbx, rsi
   201 0000014E 4883C308                    add rbx, 8
   202 00000152 4989D0                      mov r8, rdx
   203                                  
   204                                  ; If arguments okay do: 
   205                                  read_args:
   206 00000155 488B3B                      mov rdi, [rbx]
   207 00000158 48B800000000000000-         mov rax, 0
   208 00000161 00                 
   209                                  
   210                                      ; Call atof, preserving registers
   211 00000162 52                          push rdx
   212 00000163 4150                        push r8
   213 00000165 51                          push rcx
   214 00000166 E8(00000000)                call atof
   215 0000016B 59                          pop rcx
   216 0000016C 4158                        pop r8
   217 0000016E 5A                          pop rdx
   218                                  
   219 0000016F 66480F7EC0                  movq rax, xmm0 
   220 00000174 498900                      mov [r8], rax
   221 00000177 4883C308                    add rbx, 8
   222 0000017B 4983C008                    add r8, 8
   223 0000017F 48FFC9                      dec rcx
   224 00000182 75D1                        jnz read_args 
   225 00000184 C3                          ret
   226                                  
   227                                  ; Otherwise for incorrect arguments do:
   228                                  usage_error:
   229 00000185 488B16                      mov rdx, [rsi]
   230 00000188 48BE-                       mov rsi, usage
   231 0000018A [1000000000000000] 
   232 00000192 488B3C25[00000000]          mov rdi, [stderr]
   233 0000019A 48B800000000000000-         mov rax, 0
   234 000001A3 00                 
   235 000001A4 E8(00000000)                call fprintf
   236 000001A9 48BF01000000000000-         mov rdi, 1
   237 000001B2 00                 
   238 000001B3 E8(00000000)                call exit 
   239                                  
   240                                  ; Display the vertex array
   241                                  display:
   242                                  
   243 000001B8 55                          push rbp    
   244 000001B9 48BF00400000000000-         mov rdi, GL_COLOR_BUFFER_BIT
   245 000001C2 00                 
   246 000001C3 E8(00000000)                call glClear
   247                                  
   248 000001C8 48BA10270000000000-         mov rdx, SPIRO_LENGTH
   249 000001D1 00                 
   250 000001D2 48BE00000000000000-         mov rsi, 0
   251 000001DB 00                 
   252 000001DC 48BF00000000000000-         mov rdi, GL_POINTS
   253 000001E5 00                 
   254 000001E6 E8(00000000)                call glDrawArrays
   255                                  
   256 000001EB E8(00000000)                call glutSwapBuffers
   257 000001F0 5D                          pop rbp
   258 000001F1 C3                          ret
   259                                  
   260                                  ; Initialize OpenGL
   261                                  initialize:
   262                                      ; Save argc to the stack
   263                                      ; Write that a pointer to argc to rdi for calling glutInit
   264 000001F2 57                          push rdi
   265 000001F3 4889E7                      mov rdi, rsp
   266 000001F6 E8(00000000)                call glutInit
   267 000001FB 5F                          pop rdi
   268                                  
   269 000001FC 48BF00000000000000-         mov rdi, 0
   270 00000205 00                 
   271 00000206 E8(00000000)                call glutInitDisplayMode
   272                                  
   273 0000020B 48BF-                       mov rdi, name 
   274 0000020D [0000000000000000] 
   275 00000215 E8(00000000)                call glutCreateWindow
   276                                  
   277 0000021A 48BF-                       mov rdi, display
   278 0000021C [B801000000000000] 
   279 00000224 E8(00000000)                call glutDisplayFunc
   280 00000229 C3                          ret
   281                                  
   282                                  ; Begin game loop
   283                                  render:
   284 0000022A 55                          push rbp
   285 0000022B 4889E5                      mov rbp, rsp
   286                                      ; The vertex array
   287 0000022E 4881EC00710200              sub rsp, 16 * SPIRO_LENGTH
   288                                  
   289                                      ; Draw the spirograph
   290 00000235 48BE10270000000000-         mov rsi, SPIRO_LENGTH
   291 0000023E 00                 
   292 0000023F 4889E7                      mov rdi, rsp
   293 00000242 E8B9FDFFFF                  call draw_spiro
   294                                  
   295 00000247 48BF74800000000000-         mov rdi, GL_VERTEX_ARRAY
   296 00000250 00                 
   297 00000251 E8(00000000)                call glEnableClientState
   298                                  
   299 00000256 4889E1                      mov rcx, rsp
   300 00000259 48BA00000000000000-         mov rdx, 0
   301 00000262 00                 
   302 00000263 48BE0A140000000000-         mov rsi, GL_DOUBLE
   303 0000026C 00                 
   304 0000026D 48BF02000000000000-         mov rdi, 2
   305 00000276 00                 
   306 00000277 E8(00000000)                call glVertexPointer
   307                                  
   308 0000027C E8(00000000)                call glutMainLoop
   309                                  
   310 00000281 48BF74800000000000-         mov rdi, GL_VERTEX_ARRAY
   311 0000028A 00                 
   312 0000028B E8(00000000)                call glDisableClientState
   313                                  
   314 00000290 4889EC                      mov rsp, rbp
   315 00000293 5D                          pop rbp
   316 00000294 C3                          ret
   317                                  
   318                                  ; Entry!
   319                                  main:
   320 00000295 55                          push rbp
   321 00000296 4889E5                      mov rbp, rsp
   322                                      
   323                                      ; Store the radii and offset in an array
   324                                      ; The array is pointed to by rdx
   325 00000299 4883EC18                    sub rsp, 24
   326 0000029D 4889E2                      mov rdx, rsp
   327                                  
   328                                      ; Get the radii etc from the command line arguments 
   329 000002A0 52                          push rdx
   330 000002A1 56                          push rsi
   331 000002A2 57                          push rdi
   332 000002A3 E893FEFFFF                  call read_arguments
   333 000002A8 5F                          pop rdi
   334 000002A9 5E                          pop rsi
   335 000002AA 5A                          pop rdx
   336                                  
   337                                      ; Initialize OpenGL
   338 000002AB 52                          push rdx
   339 000002AC E841FFFFFF                  call initialize
   340 000002B1 5A                          pop rdx
   341                                  
   342                                      ; Extract the values of the radii etc 
   343 000002B2 F30F7E02                    movq xmm0, [rdx]
   344 000002B6 F30F7E4A08                  movq xmm1, [rdx + 8]
   345 000002BB F30F7E5210                  movq xmm2, [rdx + 16]
   346                                  
   347                                      ; Draw the spirograph
   348 000002C0 E865FFFFFF                  call render
   349                                   
   350                                      ; Return
   351 000002C5 48B800000000000000-         mov rax, 0
   352 000002CE 00                 
   353 000002CF 4889EC                      mov rsp, rbp
   354 000002D2 5D                          pop rbp
   355 000002D3 C3                          ret
