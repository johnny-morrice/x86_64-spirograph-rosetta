     1                                  ; NASM Spirograph
     2                                  ; John Morrice 2011.  Released into the public domain
     3                                  
     4                                  ; Some of this code is written in the unstructured paradigm
     5                                  
     6                                  BITS 64 
     7                                  
     8                                  %define GL_COLOR_BUFFER_BIT 0x00004000
     9                                  %define GL_POINTS 0x0000
    10                                  %define GL_VERTEX_ARRAY 0x8074
    11                                  %define GL_FLOAT 0x1406
    12                                  %define SPIRO_LENGTH 10000
    13                                  
    14                                  section .data
    15 00000000 4E41534D2053706972-         name:   db 'NASM Spirograph', 0
    16 00000009 6F677261706800     
    17 00000010 55736167653A202573-         usage:  db 'Usage: %s MOVING FIXED OFFSET', 10, 0
    18 00000019 204D4F56494E472046-
    19 00000022 49584544204F464653-
    20 0000002B 45540A00           
    21 0000002F 5469636B0A00                tick:   db 'Tick', 10, 0
    22                                  
    23                                  section .text
    24                                  
    25                                      global main 
    26                                  
    27                                      extern stderr, printf, fprintf
    28                                      extern atof
    29                                      extern exit
    30                                  
    31                                      extern glClear
    32                                      extern glEnableClientState, glDisableClientState
    33                                      extern glVertexPointer, glDrawArrays
    34                                  
    35                                      extern glutInit, glutInitDisplayMode, glutCreateWindow
    36                                      extern glutDisplayFunc, glutSwapBuffers, glutMainLoop
    37                                  
    38                                  ; Process arguments
    39                                  ; Expects:
    40                                  ;   argc in rdi
    41                                  ;   argv in rsi    
    42                                  ;   memory for 3 floats in rdx
    43                                  ; argc must equal 4, otherwise terminate
    44                                  ; Read argv into floats with atof
    45                                  read_arguments:
    46 00000000 4883FF04                    cmp rdi, 4
    47 00000004 7544                        jnz usage_error
    48 00000006 48B903000000000000-         mov rcx, 3
    49 0000000F 00                 
    50 00000010 4889F3                      mov rbx, rsi
    51 00000013 4883C308                    add rbx, 8
    52 00000017 4989D0                      mov r8, rdx
    53                                  
    54                                  ; If arguments okay do: 
    55                                  read_args:
    56 0000001A 488B3B                      mov rdi, [rbx]
    57 0000001D 48B800000000000000-         mov rax, 0
    58 00000026 00                 
    59                                  
    60                                      ; Call atof, preserving registers
    61 00000027 52                          push rdx
    62 00000028 4150                        push r8
    63 0000002A 51                          push rcx
    64 0000002B E8(00000000)                call atof
    65 00000030 59                          pop rcx
    66 00000031 4158                        pop r8
    67 00000033 5A                          pop rdx
    68                                  
    69 00000034 66480F7EC0                  movq rax, xmm0 
    70 00000039 498900                      mov [r8], rax
    71 0000003C 4883C308                    add rbx, 8
    72 00000040 4983C008                    add r8, 8
    73 00000044 48FFC9                      dec rcx
    74 00000047 75D1                        jnz read_args 
    75 00000049 C3                          ret
    76                                  
    77                                  ; Otherwise for incorrect arguments do:
    78                                  usage_error:
    79 0000004A 488B16                      mov rdx, [rsi]
    80 0000004D 48BE-                       mov rsi, usage
    81 0000004F [1000000000000000] 
    82 00000057 488B3C25[00000000]          mov rdi, [stderr]
    83 0000005F 48B800000000000000-         mov rax, 0
    84 00000068 00                 
    85 00000069 E8(00000000)                call fprintf
    86 0000006E 48BF01000000000000-         mov rdi, 1
    87 00000077 00                 
    88 00000078 E8(00000000)                call exit 
    89                                  
    90                                  ; Display the vertex array
    91                                  display:
    92                                      
    93 0000007D 48BF00400000000000-         mov rdi, GL_COLOR_BUFFER_BIT
    94 00000086 00                 
    95 00000087 E8(00000000)                call glClear
    96                                  
    97 0000008C 48BA10270000000000-         mov rdx, SPIRO_LENGTH
    98 00000095 00                 
    99 00000096 48BE00000000000000-         mov rsi, 0
   100 0000009F 00                 
   101 000000A0 48BF00000000000000-         mov rdi, GL_POINTS
   102 000000A9 00                 
   103 000000AA E8(00000000)                call glDrawArrays
   104                                  
   105 000000AF E8(00000000)                call glutSwapBuffers
   106                                  
   107                                  ; Initialize OpenGL
   108                                  initialize:
   109                                      ; Save rdi
   110                                      ; Write that location to rdi for calling glutInit
   111 000000B4 57                          push rdi
   112 000000B5 4889E7                      mov rdi, rsp
   113 000000B8 E8(00000000)                call glutInit
   114 000000BD 5F                          pop rdi
   115                                  
   116 000000BE 48BF00000000000000-         mov rdi, 0
   117 000000C7 00                 
   118 000000C8 E8(00000000)                call glutInitDisplayMode
   119                                  
   120 000000CD 48BF-                       mov rdi, name 
   121 000000CF [0000000000000000] 
   122 000000D7 E8(00000000)                call glutCreateWindow
   123                                  
   124 000000DC 48BF-                       mov rdi, display
   125 000000DE [7D00000000000000] 
   126 000000E6 E8(00000000)                call glutDisplayFunc
   127 000000EB C3                          ret
   128                                  
   129                                  ; Entry!
   130                                  main:
   131 000000EC 55                          push rbp
   132 000000ED 4889E5                      mov rbp, rsp
   133                                      
   134                                      ; Store the radii and offset in an array
   135                                      ; The array is pointed to by rdx
   136 000000F0 4883EC18                    sub rsp, 24
   137 000000F4 4889E2                      mov rdx, rsp
   138                                  
   139                                      ; Get the radii etc from the command line arguments 
   140 000000F7 52                          push rdx
   141 000000F8 56                          push rsi
   142 000000F9 57                          push rdi
   143 000000FA E801FFFFFF                  call read_arguments
   144 000000FF 5F                          pop rdi
   145 00000100 5E                          pop rsi
   146 00000101 5A                          pop rdx
   147                                  
   148                                      ; Initialize OpenGL
   149 00000102 52                          push rdx
   150 00000103 E8ACFFFFFF                  call initialize
   151 00000108 5A                          pop rdx
   152                                  
   153                                      ; Extract the values of the radii etc into
   154                                      ; rdi: moving
   155                                      ; rsi: fixed
   156                                      ; rdx: offset
   157                                      ; r10: vertices 
   158 00000109 488B3A                      mov rdi, [rdx]
   159 0000010C 488B7208                    mov rsi, [rdx + 8]
   160 00000110 488B5210                    mov rdx, [rdx + 16]
   161 00000114 4881EC80380100              sub rsp, 8 * SPIRO_LENGTH
   162                                      
   163                                   
   164                                      ; Return
   165 0000011B 48B800000000000000-         mov rax, 0
   166 00000124 00                 
   167 00000125 4889EC                      mov rsp, rbp
   168 00000128 5D                          pop rbp
   169 00000129 C3                          ret
